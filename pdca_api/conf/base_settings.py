"""
Django settings for conf project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
import os
from dataclasses import dataclass, asdict


class RowSettings(dict):
    """A dict that allows for object-like property access syntax."""

    def __getattr__(self, name):
        try:
            return self[name]
        except KeyError:
            return None


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '(k)_-+=-8$e@i10f(8cm7%x4+31d84$!hh%)lqwi+h-!8wn@!='

# 不加这个配置会导致 请求重定向301
APPEND_SLASH = False

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

DATETIME_FORMAT = "yyyy-MM-dd"
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_L10N = True
USE_TZ = False
ROOT_URLCONF = 'conf.urls'

# AUTH_USER_MODEL = 'auths.User'
WSGI_APPLICATION = 'conf.wsgi.application'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'django_filters',
    'corsheaders',
]

INSTALLED_APPS += [
    'apps.auths',
    'apps.plan',
    'apps.upload',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',

    'common.middles.middlewares.JWTAuthenticationMiddleware',
    'common.middles.middlewares.PermissionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',

    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

MIDDLEWARE += [
    "common.middles.middlewares.LoggerMiddleware",
    "common.middles.middlewares.APIExceptionMiddleware"
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'staticfiles': 'django.templatetags.static',
            }
        },
    }, ]

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auths` permissions,
    # or allow read-only access for unauthenticated users.
    'EXCEPTION_HANDLER': 'common.exceptions.custom_exception_handler',
    'DEFAULT_PERMISSION_CLASSES': [
        'common.middles.permissions.IsAuthenticated',
        'common.middles.permissions.RolesAuthenticated'
        # 'rest_framework.permissions.IsAuthenticated'
        # 'rest_framework.permissions.AllowAny'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'common.middles.authentications.JWTAppAuthentication'
    ],
    'DEFAULT_PAGINATION_CLASS': 'common.middles.paginations.QldPageNumberPagination',
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',
                                'rest_framework.filters.SearchFilter'),
    'DEFAULT_METADATA_CLASS': 'common.meta.MinimalMetadata',
    #
    # 'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema'
    # 接口文档生成
    # 'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.AutoSchema'
}


# https://lincolnloop.com/blog/django-logging-right-way/
def get_logger(level="INFO", handler="console"):
    _loggers = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '%(levelname)s %(asctime)s %(name)s:%(lineno)s [%(message)s]',
                'datefmt': "%d/%m/%Y %H:%M:%S"
            },
            'simple': {
                'format': '%(levelname)s %(message)s'
            },
        },
        'filters': {
            'require_debug_true': {
                '()': 'django.utils.log.RequireDebugTrue',
            },
        },
        'handlers': {
            'file': {
                'level': 'INFO',
                'class': 'logging.StreamHandler',
                'formatter': 'verbose',
            },
            'console': {
                'level': 'INFO',
                'class': 'logging.StreamHandler',
                'formatter': 'verbose'
            },
            # 'sentry': {
            #     'level': 'WARNING',
            #     'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
            # },
        },
        'loggers': {
            '': {
                'handlers': [handler],
                'level': level,
                'propagate': True,
            }
        },
    }
    return _loggers


ALLOWED_HOSTS = ["*"]
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True

CORS_ORIGIN_REGEX_WHITELIST = (
    '*'
)

CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Pragma',
)


@dataclass
class JWTPayload:
    """
       JWT负载数据类。此数据类用于存储和处理JWT（JSON Web Token）的负载部分。
       负载部分包含一组声明（claims），这些声明是关于该令牌的有用信息。
       使用dataclass装饰器简化了类的定义，自动从字段生成一些方法，如init, repr, str等。
       """

    def get_available(self):
        """
                获取所有可用的负载项。

                该方法的目的是筛选出所有具有实际值（非False, None等）的负载项。
                它通过检查当前实例的属性，并仅返回那些具有非空值的属性。

                Returns:
                    dict: 一个字典，仅包含那些具有实际值的属性及其值。
                """
        d = asdict(self)
        ret = {
            key: val
            for key, val in d.items()
            if val
        }
        return ret


@dataclass
class AppPayload(JWTPayload):
    """
        应用程序负载数据类，继承自JWTPayload。

        这个类扩展了基础的JWT负载类，添加了应用程序特定的字段。

        Attributes:
            user_id (int): 用户ID，标识哪个用户与这个负载关联。默认值为None。
            exp (int): 过期时间戳，表示这个负载何时过期。默认值为0。
        """
    user_id: int = None
    exp: int = 0


JWT_HEADERS = {}
# TODO
# JWT_EXPIRE_IN = 86400 * 60  # 1 day
JWT_EXPIRE_IN = 86400  # 1 day
JWT_EXPIRE_IN_REFRESH = 86400 * 3
JWT_SECRET_KEY = '7tcmra7w#_azmc(7ia_136qo&67$^*)cderl13_x6o3e2onl8976fr'
JWT_PAYLOAD = JWTPayload
APP_PAYLOAD = AppPayload

# 110mb
DATA_UPLOAD_MAX_MEMORY_SIZE = 115343360

DINGDING = {
    "AgentId": 123,
    "AppKey": "xx",
    "AppSecret": "xx",
    "URL": "https://oapi.dingtalk.com",
    "APPROVE_PROCESS": {  # process_code
        "create_xx": {
            "process_code": "abc",  # 审批流程的id
        },
        "DINGTALK_AES_TOKEN": "abc",
        "nonce": "abc",
        "CorpId": "abc",
    }
}
